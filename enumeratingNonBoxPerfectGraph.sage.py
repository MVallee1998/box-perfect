

# This file was *autogenerated* from the file enumeratingNonBoxPerfectGraph.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import numpy as np
from itertools import combinations
import numba

def getEssencePolyhedronFromGraph(g):
	trivialConstraintsGe0 = np.array([np.zeros(g.order()*g.order() +_sage_const_1 ) for i in range(_sage_const_0 ,g.order()*g.order())])
	trivialConstraintsLe1 = np.array([np.zeros(g.order()*g.order() +_sage_const_1 ) for i in range(_sage_const_0 ,g.order()*g.order())])
	c = _sage_const_1 
	for j in trivialConstraintsGe0:
		j[c]=_sage_const_1 
		c = c+_sage_const_1 
	
	c = _sage_const_1 
	for j in trivialConstraintsLe1:
		j[c]=-_sage_const_1 
		j[_sage_const_0 ] = _sage_const_1 
		c = c+_sage_const_1 
	
	cliqueOfg = list(g.all_cliques())
	
	cliqueConstraints = np.array([np.zeros(g.order()* g.order()+_sage_const_1 ) for j in cliqueOfg])
	c=_sage_const_0 
	for K in cliqueOfg:
		cliqueConstraints[c][_sage_const_0 ] = _sage_const_1 
		for v in K:
			for i in range(_sage_const_0 ,g.order()):
				cliqueConstraints[c][i*g.order() + v+_sage_const_1 ] = -_sage_const_1 
		c=c+_sage_const_1 
	constraintvectors = np.concatenate((trivialConstraintsGe0, cliqueConstraints,trivialConstraintsLe1))
	print("coucou")
	return Polyhedron(ieqs = constraintvectors)
			


f = open("perfect5.g6","r")

G = graphs_list.from_whatever(f)

for g in G:
	if(not getEssencePolyhedronFromGraph(g).is_lattice_polytope()):
		P = g.plot()
		P.show()
	print("pute")





